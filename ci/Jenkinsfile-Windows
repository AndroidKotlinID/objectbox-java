def COLOR_MAP = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']

String buildsToKeep = '500'

// https://jenkins.io/doc/book/pipeline/syntax/
pipeline {
    agent { label 'windows' }
    
    environment {
        GITLAB_URL = credentials('gitlab_url')
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: buildsToKeep, artifactNumToKeepStr: buildsToKeep))
        gitLabConnection("${env.GITLAB_URL}")
    }

    triggers {
        upstream(upstreamProjects: "objectbox-windows/${env.BRANCH_NAME.replaceAll("/", "%2F")}",
                threshold: hudson.model.Result.SUCCESS)
    }

    stages {
        stage('init') {
            steps {
                // "cmd /c" for an OK exit code if no file is found
                bat 'cmd /c del tests\\objectbox-java-test\\hs_err_pid*.log'
            }
        }

        stage('build-java') {
            steps {
                bat 'gradlew cleanTest build test install'
            }
        }
    }

    // For global vars see /jenkins/pipeline-syntax/globals
    post {
        always {
            junit '**/build/test-results/**/TEST-*.xml'
            archive 'tests/*/hs_err_pid*.log'
            archive '**/build/reports/findbugs/*'
        }

        changed {
            slackSend color: COLOR_MAP[currentBuild.currentResult],
                    message: "Changed to ${currentBuild.currentResult}: ${currentBuild.fullDisplayName}\n${env.BUILD_URL}"
        }

        failure {
            slackSend color: "danger",
                    message: "Failed: ${currentBuild.fullDisplayName}\n${env.BUILD_URL}"
            updateGitlabCommitStatus name: 'build-windows', state: 'failed'
        }

        success {
            updateGitlabCommitStatus name: 'build-windows', state: 'success'
        }
    }
}
